/*************************************************************************
 *
 *  Copyright (c) 2020 Rajit Manohar
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA  02110-1301, USA.
 *
 **************************************************************************
 */
namespace syn {

/*
 * Datapath elements
 *
 *   Need to define:
 *      - variables
 *      - send
 *      - receive
 *      - expression evaluation
 *
 */

/**
 * a variable, represented by a cross coupled inverter.
 * with a week pullup, the variable is written with a strong pulldown
 * @param W: how many bits the variable has
 * @param I: the default bool the variable is set to on reset
 */ 
export template<pint W; pbool I>
defproc var_init(sdtvar<W> v) 
{
  prs * {
    (i:W:
       v.r[i].f<8> -> v.r[i].t-
       v.r[i].t<8> -> v.r[i].f-
      [weak=1] ~v.r[i].t<4,4> -> v.r[i].f+
      [weak=1] ~v.r[i].f<4,4> -> v.r[i].t+

      Reset -> v.r[i].d[int(~I)]-
     )
  }
}

/**
 * a transfer triggers a pull channel (sdtexprchan) and puts the result on a push channel (sdtchan).
 * @param W: width of the push and pull channels
 */
export template<pint W>
defproc transfer(a1of1? c; sdtexprchan?<W> e; sdtchan!<W> ch)
{
  c.r = e.r;
  e.d = ch.d;
  c.a = ch.a;
}

/**
 * recv is a write port - so a write to a variable - that is triggered/gated by a ctl channel.
 * @param W: width of the variable and channel
 */
export template<pint W>
defproc recv(a1of1 c; sdtchan<W> ch; sdtvar<W> var)
{
  bool cr;
  sigbuf<2*W> s(c.r,cr);

  bool wack[W];
    
  prs {
    (i:W:
       [keeper=0] cr & ch.d.r[i].t -> var.r[i].f-
       [keeper=0] cr & ch.d.r[i].f -> var.r[i].t-

      cr & ((var.r[i].t & ch.d.r[i].t) | (var.r[i].f & ch.d.r[i].f)) -> wack[i]-
      ~cr  & ~ch.d.r[i].t & ~ch.d.r[i].f -> wack[i]+
     )
  }
  (j:W: sizing {p_n_mode <- 1; leak_adjust <- 1;  wack[j]{-1}; var.r[j].t{-1};  var.r[j].f{-1} })
  

  ctree<W,false> ct(wack);
  
  prs {
    Reset | ct.out => c.a-
  }
  sizing {
    leak_adjust <- 1; 
    p_n_mode <- 1;
    c.a{-1}
  }
  c.a = ch.a;
}

/**
 * recvport gates/triggers a variable write on a connected write port.
 * @param W: width of the port and channel
 */
export template<pint W>
defproc recvport(a1of1 c; sdtchan<W> ch; sdtchan<W> port)
{
  bool cr;
  sigbuf<2*W> s(c.r,cr);
  bool _t[W], _f[W];

  prs {
      (i:W: cr & ch.d.r[i].t #> _t[i]-
            cr & ch.d.r[i].f #> _f[i]-
        _t[i] => port.d.r[i].t-
        _f[i] => port.d.r[i].f-
      )
  }
  (j:W: sizing {p_n_mode <- 1; leak_adjust <- 1; _t[j]{-1};  _f[j]{-1}; port.d.r[j].t{-1};  port.d.r[j].f{-1} })
  port.a = c.a;
  port.a = ch.a;
}

/**
 * a port mux for reading c that selects from multiple send channels based on control channels
 * @param W: wodth of the channels
 * @param N: number of input channels
 */
export template<pint W,N>
defproc muxinport(sdtchan?<W> c; sdtchan<W> m[N]; a1of1 ctrl[N])
{
  { N > 0 : "Parameter out of range" };


  [ N = 1 -> m[0] = c;
  [] else -> 
       sigbuf<2*W> s[N];
       bool _t[N][W], _f[N][W];
       (i:N: s[i](.in=ctrl[i].r);)
       prs {
        (i:W: (j:N: c.d.r[i].t & s[j].out #> _t[j][i]-
          c.d.r[i].f & s[j].out #> _f[j][i]-
          _t[j][i] => m[j].d.r[i].t-
          _f[j][i] => m[j].d.r[i].f-
        ) )
       }
       (i:W: (j:N:  sizing {p_n_mode <- 1; leak_adjust <- 1; _t[j][i]{-1};  _f[j][i]{-1}; m[j].d.r[i].t{-1};  m[j].d.r[i].f{-1}} ))

       (i:N: m[i].a = ctrl[i].a;)
       ortree<N> o(,c.a);
       (i:N: m[i].a=o.in[i];)
  ]

}

/**
 * a port mux for writing c from multiple channels
 * @param W: wodth of the channels
 * @param N: number of output channels
 */
export template<pint W,N>
defproc muxoutport(sdtchan!<W> c; sdtchan<W> m[N])
{
  { N > 0 : "Parameter out of range" };

  [ N = 1 -> m[0] = c;
  [] else ->
       bool _v[N];
       bool _a;
      ortree<N> ot[W];
      ortree<N> of[W];
      (i:W: (j:N: 
                m[j].d.r[i].t = ot[i].in[j];
                m[j].d.r[i].f = of[i].in[j];)
                c.d.r[i].f = of[i].out;
                c.d.r[i].t = ot[i].out;)
       prs {
          /* check which input is pending */
          (i:N: m[i].d.r[0].t | m[i].d.r[0].f => _v[i]- )
            c.a => _a-
          /* ack the appropriate input */
          (i:N: _a & _v[i] #> m[i].a-)
        }
        (i:N: sizing {p_n_mode <- 1; leak_adjust <- 1; m[i].a{-1}; _v[i]{-1}} )
        sizing {p_n_mode <- 1; leak_adjust <- 1;  _a{-1}}
  ]
}


export namespace expr {

export template<pint W>
defproc wrap_to_array(sdtexprchan<W> in; sdtexprchan<1> out[W])
{
  (i:W: 
        in.r = out[i].r;
        in.d.r[i] = out[i].d.r[0];
        )
}

export template<pint W>
defproc wrap_from_array(sdtexprchan<1> in[W]; sdtexprchan<W> out)
{
  (i:W: 
        out.r = in[i].r;
        out.d.r[i] = in[i].d.r[0];
        )
}

}

/**
 * initialises a variable and creates the appropriate read and write ports.
 * @param W: width of the variable
 * @param NO: number of output ports
 * @param NI: number of input ports
 */
export template<pint W; pint NI,NO>
defproc var_int_ports(sdtvar<W> v; sdtchan<W> in[NI]; sdtexprchan<W> out[NO])
{
  var_init<W,false> x(v);
  expr::writeport<W> w(v);
  [ NO > 0 -> expr::readport<W> r[NO]; 
              (i:NO: r[i](.var=x.v, .out=out[i]);)
  ]

  [ NI = 1 -> w.in=in[0];
  [] NI > 1 -> 
      bool _a[NI];
      ortree<NI> ot[W];
      ortree<NI> of[W];
      (i:W: (j:NI: 
                in[j].d.r[i].t = ot[i].in[j];
                in[j].d.r[i].f = of[i].in[j];)
                w.in.d.r[i].f = of[i].out;
                w.in.d.r[i].t = ot[i].out;)
      prs {
        (i:NI: 
          w.in.a & (in[i].d.r[0].t|in[i].d.r[0].f) -> _a[i]-
          ~w.in.a & ~(in[i].d.r[0].t|in[i].d.r[0].f) -> _a[i]+
          _a[i] => in[i].a-
        )
      }
      (i:NI: sizing {p_n_mode <- 1; leak_adjust <- 1; in[i].a{-1}; _a[i]{-1}})
  ]
}  

/*
 * this is a workarround for simulation cases where you have 0 read ports, in a physical implementation that would not make sense,
 * zero length arrays are not allowed.
 */
export template<pint W; pint NI>
defproc var_int_in_ports(sdtvar<W> v; sdtchan<W> in[NI])
{
  var_int_ports<W,NI,1> ports(v,in);
  ports.out[0].r = GND;
}

export template<pint W; pint NO>
defproc var_int_out_ports(sdtvar<W> v; sdtexprchan<W> out[NO])
{
  var_int_ports<W,1,NO> ports(v,,out);
  (i:W: ports.in[0].d.r[i].t = GND; ports.in[0].d.r[i].f = GND;)
}


}
