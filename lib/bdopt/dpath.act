/*************************************************************************
 *
 *  Copyright (c) 2020 Rajit Manohar
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA  02110-1301, USA.
 *
 **************************************************************************
 */
import globals;
import std::gates;

namespace syn {

/*
 * Datapath elements
 *
 *   Need to define:
 *      - variables
 *      - send
 *      - receive
 *      - expression evaluation
 *
 */

export defproc delaybuf (bool in, out)
{
  INVX1 ix1(in);
  INVX1 inx2(ix1.Y, out);
}

export template<pint D>
defproc delay (bool in, out)
{
  [ D > 0 -> 
    delaybuf d[D];
    (i:D-1:d[i].out=d[i+1].in;)
    d[0].in = in;
    d[D-1].out = out;
  [] else -> out=in;
  ]
}

/**
 * a variable, represented by a cross coupled inverter.
 * with a week pullup, the variable is written with a strong pulldown
 * @param W: how many bits the variable has
 * @param I: the default bool the variable is set to on reset
 */ 
export template<pbool I>
defcell var_one_bit(bool dt, df)
{
  prs* {
    df<8> -> dt-
    dt<8> -> df-
    [weak=1] ~dt<4,4> -> df+
    [weak=1] ~df<4,4> -> dt+
  }
  [I -> prs { Reset -> df- }
 []else -> prs { Reset -> dt- }
  ]    
}

export template<pint W; pbool I>
defproc var_init(sdtvar<W> v) 
{
  var_one_bit<I> bits[W];
  (i:W: bits[i](v.d[i].t,v.d[i].f);)
}

/**
 * a transfer triggers a pull channel (sdtexprchan) and puts the result on a push channel (sdtchan).
 * @param W: width of the push and pull channels
 */
export template<pint W>
defproc transfer(a1of1? c; sdtexprchan<W> e; sdtchan<W> ch)
{
  c.r = e.r;
  e.a = ch.r;
  e.d = ch.d;
  c.a = ch.a;
}

/**
 * recvport gates/triggers a variable write on a connected write port.
 * @param W: width of the port and channel
 */
export template<pint W, W2>
defproc recvport(a1of1 c; sdtchan<W> ch; sdtchan<W2> port)
{
  bool _r;
  prs {
    c.r & ch.r #> _r-
  }
  sizing {
   leak_adjust <- 1;
    _r {-1}
  }
  INVX1 ix(_r,port.r);
  ch.d[0..std::min(W,W2)-1] = port.d[0..std::min(W,W2)-1];
  [ W2 > W -> (i:W..W2-1: port.d[i] = GND;) ]
  ch.a = port.a;
  c.a = port.a;
}

/**
 * recvport_drop is like recvport but does not actually write to any variable. This save a write in the case of a `L?`
 * without an associated variable
 */
export template<pint W>
defproc recvport_drop(a1of1 c; sdtchan<W> ch)
{
  bool _r;
  prs {
    c.r & ch.r #> _r-
  }
  sizing {
   leak_adjust <- 1;
    _r {-1}
  }
  INVX1 ix(_r,port.r);
  ch.a = port.a;
  c.a = port.a;
}

/**
 * a port mux for reading c that selects from multiple send channels based on control channels
 * @param W: wodth of the channels
 * @param N: number of input channels
 */
export template<pint W,N>
defproc muxinport(sdtchan?<W> c; sdtchan<W> m[N]; a1of1 ctrl[N])
{
  { N > 0 : "Parameter out of range" };


  [ N = 1 -> m[0] = c;
  [] else -> 
       delay<3> dly[N];
       std::gates::sigbuf<N/3> ctl_req[N];
       (i:N: ctl_req[i].in = ctrl[i].r;)
       AND2X1 data_and[N][W];
       (i:N: (j:W: data_and[i][j].A = ctl_req[i].out;
                  data_and[i][j].B = c.d[j];
                  data_and[i][j].Y = m[i].d[j]; 
                  )
              dly[i].out = m[i].r;
              )
       
       bool _in[N];
       prs {
         (i:N: ctl_req[i].out & c.r #> _in[i]-)
       }
       INVX1 ix[N];
       (i:N: ix[i](_in[i], dly[i].in); )
       sizing {
	 leak_adjust <- 1;
	 (;i:N: _in[i]{-1})
       }

       (i:N: m[i].a = ctrl[i].a;)
       std::gates::ortree<N,false> o(,c.a);
       (i:N: m[i].a=o.in[i];)
  ]

}

/**
 * a port mux for writing c from multiple channels
 * @param W: wodth of the channels
 * @param N: number of output channels
 */
export template<pint W,N>
defproc muxoutport(sdtchan!<W> c; sdtchan<W> m[N])
{
  { N > 0 : "Parameter out of range" };


  [ N = 1 -> m[0] = c;
  [] else ->
       bool c_a;
       std::gates::sigbuf<W> s(c.a,c_a);
       AND2X1 _mux[W][N];
       std::gates::ortree<N,false> ortr[W];
       std::gates::ortree<N, false> orreq;
       (i:W: (j:N: 
                  _mux[i][j].A = m[j].d[i]; 
                  _mux[i][j].B = m[j].r;
                  _mux[i][j].Y = ortr[i].in[j];
              )
              ortr[i].out = c.d[i];
        )
        (j:N: orreq.in[j] = m[j].r;)
       delay<20> dly_req(orreq.out,c.r);

       bool _ma[N];
       prs {
          /* ack the appropriate input */
          (i:N: c_a & m[i].r #> _ma[i]-)
        }
    sizing {
      leak_adjust <- 1;
      (;i:N: _ma[i]{-1})
    }
    INVX1 ix[N];
    (i:N: ix[i](_ma[i],m[i].a);)
  ]
}

export template<pint N>
defproc mux_bool_inport(sdtboolchan? c; sdtchan<1> m[N]; a1of1 ctrl[N])
{
  muxinport<1,N> i(c.x,m,ctrl);
}

export template<pint N>
defproc mux_bool_outport(sdtboolchan! c; sdtchan<1> m[N])
{
  muxoutport<1,N> i(c.x,m);
}

/*-- variable access ports --*/
/**
 * the write port is a provides the pull down element to set a variable.
 * it does so when the channel issues a request
 * @param W: width of the channel and variable
 *
 * NOTE: @TODO if timing analysis is to hard go back to validation tree
 */
export template<pint W>
defproc writeport(sdtvar<W> var; sdtchan<W> in)
{
  bool _wack[W];
  bool _d_B[W];
  bool req_in, _dly_req_in;
  delay<5> dly(req_in);
  std::gates::sigbuf<W> s(in.r,req_in);

  prs {
    (i:W: [keeper=0] in.d[i] & req_in & _dly_req_in -> var.d[i].f-
          [keeper=0] _d_B[i] & req_in & _dly_req_in -> var.d[i].t-
     )
  }
  (i:W: sizing {
    leak_adjust <- 1;
    var.d[i].f{-1};
    var.d[i].t{-1}
  })
  INVX1 id[W];
  (i:W: id[i](.A=in.d[i],.Y=_d_B[i]);)
    
  INVX1 ix(dly.out, _dly_req_in);
  NOR2X1 iy(Reset,_dly_req_in, in.a);
    
}

/**
 * the read port gives out the value of the variable on request.
 * @param W: width of the channel and variable
 */
export template<pint W>
defproc readport(sdtvar<W> var; sdtexprchan<W> out)
{
  bool xout, _xout;

  std::gates::sigbuf<2*W> s(xout,_xout);
  delay<4> dly(out.r, out.a);

  INVX1 ix(out.r,xout);
  prs {
    (i:W:
     ~_xout & ~var.d[i].f -> out.d[i]+
     _xout -> out.d[i]-
     )
  }
  sizing {
       leak_adjust <- 1;
       (;i:W:out.d[i]{-1})
  }
}

/**
 * initialises a variable and creates the appropriate read and write ports.
 * @param W: width of the variable
 * @param NO: number of output ports
 * @param NI: number of input ports
 */
export template<pint W; pint NI,NO>
defproc var_int_ports(sdtvar<W> v; sdtchan<W> in[NI]; sdtexprchan<W> out[NO])
{
  var_init<W,false> x(v);
  [ NO > 0 -> readport<W> r[NO]; 
              (i:NO: r[i].var=x.v; r[i].out=out[i];)
  ]
  [ NI > 0 -> writeport<W> wr[NI]; 
              (j:NI: wr[j].var=x.v; wr[j].in=in[j];)
  ]
} 

/*
 * this is a workarround for simulation cases where you have 0 read ports, in a physical implementation that would not make sense,
 * zero length arrays are not allowed.
 */
export template<pint W; pint NI>
defproc var_int_in_ports(sdtvar<W> v; sdtchan<W> in[NI])
{
  var_int_ports<W,NI,1> ports(v,in);
  ports.out[0].r = GND;
}
export template<pint W; pint NO>
defproc var_int_out_ports(sdtvar<W> v; sdtexprchan<W> out[NO])
{
  var_int_ports<W,1,NO> ports(v,,out);
  ports.in[0].r = GND;
}

/*
 * this is a workarround for simulation cases where you have 0 read ports, in a physical implementation that would not make sense,
 * zero length arrays are not allowed.
 */
export template<pint NI>
defproc var_bool_in_ports(sdtboolvar v; sdtchan<1> in[NI])
{
  var_int_ports<1,NI,1> x;
  (i:NI: x.in[i]=in[i];)
  x.out[0].r = GND;
  x.v = v.x;  
} 

export template<pint NO>
defproc var_bool_out_ports(sdtboolvar v; sdtexprchan<1> out[NO])
{
  var_int_ports<1,1,NO> x;
  (i:NO: x.out[i]=out[i];)
  x.in[0].r = GND;
  x.v = v.x;  
} 

/**
 * recv is a write port - so a write to a variable - that is triggered/gated by a ctl channel.
 * @param W: width of the variable and channel
 */
export template<pint W>
defproc recv(a1of1 c; sdtchan<W> ch; sdtvar<W> var)
{
  sdtchan<W> portch;
  recvport<W> gate(.c=c,.ch=ch,.port=portch);
  writeport<W> port(.var=var,.in=portch);
}

export defproc trueto1of2(r1of2 out)
{
  out.a = out.t;
  out.f = GND;
  out.d[0] = out.t;
  out.r = out.a;
}

export defproc bdto1of2(r1of2 out)
{
  bool _d, _t, _f;

  INVX1 ix1(out.d[0],_d);
  INVX1 ix2(_t,out.t);
  INVX1 ix3(_f,out.f);
  
  prs {
    out.r & out.a & out.d[0] -> _t-
    ~out.a -> _t+
    out.r & out.a & _d -> _f-
     ~out.a -> _f+
  }
  sizing {
    leak_adjust <- 1;
    _t{-1}; _f{-1}
  }
}

}
